{"version":3,"sources":["helpers/fomats.js","redux/modal/modalActions.js","redux/events/eventsActions.js","components/EventEditor/EventEditor.jsx","components/Calendar/Calendar.jsx","App.js","redux/modal/modalReducer.js","redux/events/eventsReduser.js","redux/store.js","index.js"],"names":["formatDate","date","year","getFullYear","month","getMonth","day","getDate","formatToLocalDate","fullDate","hours","addedTime","result","Date","setHours","parseInt","slice","getTimeFromDate","getHours","minutes","getMinutes","showEditor","createAction","closeEditor","addEvent","deleteEvent","editEvent","connect","state","eventsList","events","dispatch","eventToAdd","updatedList","id","Radium","props","targetRef","useRef","isEditorForNewEvent","selectedSlot","slots","initialState","eventName","eventInfo","title","eventDate","start","eventTime","notes","color","useState","setState","fieldsErrors","setFieldsErrors","isErrorShown","setShownErrors","position","absolute","left","bounds","clientX","top","clientY","onHandlerChande","e","prev","target","name","value","onSubmitForm","preventDefault","onHandleValidation","end","now","onCloseEditor","onEditForm","idToEdit","objIndex","findIndex","el","newFieldsObj","oldObj","stateObj","newFields","Object","entries","key","toString","updateFieldsInObj","updatedObj","formIsValid","errors","length","useEffect","current","scrollIntoView","behavior","className","style","ref","onSubmit","onClick","type","htmlFor","placeholder","onChange","eventIdToDelete","localizer","momentLocalizer","moment","isEditorOpened","modals","isEditorShown","openEditor","setSelectedSlot","defaultDate","defaultView","height","selectable","onSelectSlot","sec","box","onSelectEvent","eSec","pageX","pageY","onNavigate","onView","onRangeChange","tooltipAccessor","eventPropGetter","event","backgroundColor","padding","dayPropGetter","createReducer","action","payload","filter","item","store","configureStore","reducer","modalReducer","eventsReducer","middleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4b32f366.chunk.js","sourcesContent":["// форматує \"Wed Aug 04 2021 12:53:00 GMT+0300 (Eastern European Summer Time)\" в обєкт дати \"2021-07-03  \"\r\nexport const formatDate = (date) => {\r\n    const year = date.getFullYear();\r\n    let month = date.getMonth() + 1;\r\n    let day = date.getDate();\r\n\r\n    month = month < 10 ? ('0' + month) : month;\r\n    day = day < 10 ? ('0' + day) : day;\r\n\r\n    return `${year}-${month}-${day}`;\r\n}\r\n\r\n// форматує \"2021-07-03 13:30\" в обєкт дати \"Wed Aug 04 2021 12:53:00 GMT+0300 (Eastern European Summer Time)\"\r\nexport const formatToLocalDate = (fullDate, hours, addedTime) => {\r\n    if (addedTime) {\r\n        const result = new Date(`${fullDate}`).setHours(parseInt(hours.slice(0, 2)) + 1, parseInt(hours.slice(3, 5)));\r\n        return new Date(result);\r\n    }\r\n    return new Date(`${fullDate} ${hours}`);\r\n}\r\n\r\nexport const getTimeFromDate = (date) => {\r\n    const hours = date.getHours();\r\n    let minutes = date.getMinutes();\r\n\r\n    return `${hours}:${minutes}`\r\n}\r\n\r\nexport const updateFieldsInObj = (oldObj, stateObj) => {\r\n    const newFields = {};\r\n    for (const [key, value] of Object.entries(oldObj)) {\r\n        if (stateObj[key] && key.toString() !== stateObj[key].toString()) {\r\n            newFields[key] = stateObj[key]\r\n        }\r\n    }\r\n\r\n    return newFields;\r\n}\r\n\r\n","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const showEditor = createAction(\"modalReduser/showEditor\");\nexport const closeEditor = createAction(\"modalReduser/closeEditor\");\n// export const addContact = createAction(\"listReduser/addContact\");\n// export const deleteContact = createAction(\"listReduser/deleteContact\");","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const addEvent = createAction(\"eventsReduser/addEvent\");\nexport const deleteEvent = createAction(\"eventsReduser/deleteEvent\");\nexport const editEvent = createAction(\"eventsReduser/editEvent\");\n","import React, {useEffect, useState, useRef} from \"react\"\r\nimport {connect} from \"react-redux\";\r\nimport Radium, {Style} from 'radium';\r\nimport {formatDate, formatToLocalDate, getTimeFromDate, updateFieldsInObj} from '../../helpers/fomats'\r\nimport {showEditor, closeEditor} from \"../../redux/modal/modalActions\";\r\nimport {addEvent, editEvent, deleteEvent} from \"../../redux/events/eventsActions\";\r\n\r\n// import st from './event_editor.css'\r\n\r\nconst EventEditor = props => {\r\n    // const targetRef = React.createRef();\r\n    const targetRef = useRef(null)\r\n\r\n    // Перевірка чи нова подія чи потрібно радагувати\r\n    const isEditorForNewEvent = props.selectedSlot.slots[0];\r\n\r\n    const initialState = {\r\n        eventName: isEditorForNewEvent ? '' : props.selectedSlot.eventInfo.title,\r\n        eventDate: isEditorForNewEvent ? formatDate(props.selectedSlot.slots[0]) : formatDate(props.selectedSlot.eventInfo.start),\r\n        eventTime: isEditorForNewEvent ? '' : getTimeFromDate(props.selectedSlot.eventInfo.start),\r\n        notes: isEditorForNewEvent ? '' : props.selectedSlot.eventInfo.notes,\r\n        color: isEditorForNewEvent ? 'blue' : props.selectedSlot.eventInfo.color,\r\n    }\r\n\r\n    const [state, setState] = useState(initialState)\r\n    const [fieldsErrors, setFieldsErrors] = useState({})\r\n    const [isErrorShown, setShownErrors] = useState(false)\r\n\r\n    let position = {\r\n        absolute: {\r\n            left: props.selectedSlot.bounds.clientX + 'px',\r\n            top: props.selectedSlot.bounds.clientY + 10 + 'px',\r\n        }\r\n    }\r\n\r\n    const onHandlerChande = (e) => {\r\n        setState(prev => {\r\n            return {...prev, [e.target.name]: e.target.value}\r\n        })\r\n    }\r\n\r\n    const onSubmitForm = (e) => {\r\n        e.preventDefault();\r\n\r\n        // Перевірка на валідність полів\r\n        if (!onHandleValidation()) {\r\n            setShownErrors(true);\r\n            return;\r\n        } else {\r\n            setShownErrors(false)\r\n        }\r\n\r\n        if (!isEditorForNewEvent) {\r\n            onEditForm();\r\n            return;\r\n        }\r\n\r\n        // Створюємо подію\r\n        const eventToAdd = {\r\n            title: eventName,\r\n            start: formatToLocalDate(eventDate, eventTime),\r\n            end: formatToLocalDate(eventDate, eventTime, 1),\r\n            // allDay?: boolean\r\n            notes: notes,\r\n            color: color,\r\n            id: Date.now()\r\n        }\r\n\r\n        props.addEvent(eventToAdd)\r\n        onCloseEditor();\r\n    }\r\n\r\n    // Форматування події\r\n    const onEditForm = () => {\r\n        const eventsList = props.eventsList;\r\n        const idToEdit = props.selectedSlot.eventInfo.id;\r\n\r\n        const objIndex = eventsList.findIndex(el => el.id === idToEdit)\r\n\r\n        // Створюємо подію\r\n        const eventToAdd = {\r\n            title: eventName,\r\n            start: formatToLocalDate(eventDate, eventTime),\r\n            end: formatToLocalDate(eventDate, eventTime, 1),\r\n            notes: notes,\r\n            color: color,\r\n        }\r\n\r\n        const newFieldsObj = updateFieldsInObj(eventsList[objIndex], eventToAdd);\r\n\r\n        const updatedObj = {...eventsList[objIndex], ...newFieldsObj}\r\n\r\n        const updatedList = [\r\n            ...eventsList.slice(0, objIndex),\r\n            updatedObj,\r\n            ...eventsList.slice(objIndex + 1),\r\n        ];\r\n\r\n        props.editEvent(updatedList);\r\n        onCloseEditor();\r\n    }\r\n\r\n    const onCloseEditor = () => {\r\n        props.closeEditor();\r\n        setState(initialState);\r\n    }\r\n\r\n    // Валідація полів\r\n    const onHandleValidation = () => {\r\n        let formIsValid = true;\r\n        let errors = {};\r\n\r\n        //Name\r\n        if (state[\"eventName\"].length < 1) {\r\n            formIsValid = false;\r\n            errors[\"eventName\"] = \"Cannot be empty\";\r\n        }\r\n\r\n        //Date\r\n        if (state[\"eventDate\"].length < 1) {\r\n            formIsValid = false;\r\n            errors[\"eventDate\"] = \"Cannot be empty\";\r\n        }\r\n        //Name\r\n        if (state[\"eventTime\"].length < 1) {\r\n            formIsValid = false;\r\n            errors[\"eventTime\"] = \"Cannot be empty\";\r\n        }\r\n\r\n        setFieldsErrors(errors);\r\n        return formIsValid;\r\n    }\r\n\r\n    // Видалення події\r\n    const onDeleteEvent = () => {\r\n        const eventIdToDelete = props.selectedSlot.eventInfo.id;\r\n\r\n        props.deleteEvent(eventIdToDelete);\r\n        onCloseEditor();\r\n    }\r\n\r\n    useEffect(() => {\r\n        targetRef.current?.scrollIntoView({behavior: \"smooth\"});\r\n    })\r\n\r\n    const {eventName, eventDate, eventTime, notes, color} = state;\r\n    return (\r\n        <div className='editor'\r\n             style={[position.absolute]}\r\n             ref={targetRef}\r\n        >\r\n            <form onSubmit={onSubmitForm}>\r\n                <button onClick={onCloseEditor} type='button' className='close_btn'></button>\r\n                <div className='input_wrapper'>\r\n                    <label htmlFor=\"eventName\">Title</label>\r\n                    <input id=\"eventName\" type=\"text\" name=\"eventName\"\r\n                           placeholder=\"eventName\" value={eventName} onChange={onHandlerChande}/>\r\n                    {fieldsErrors['eventName'] && isErrorShown &&\r\n                    <span className='error_span'>{fieldsErrors['eventName']}</span>}\r\n                </div>\r\n                <div className='input_wrapper'>\r\n                    <label htmlFor=\"eventDate\">Date</label>\r\n                    <input id=\"eventDate\" type=\"date\" name=\"eventDate\"\r\n                           placeholder=\"eventDate\" value={eventDate} onChange={onHandlerChande}/>\r\n                    {fieldsErrors['eventDate'] && isErrorShown &&\r\n                    <span className='error_span'>{fieldsErrors['eventDate']}</span>}\r\n                </div>\r\n                <div className='input_wrapper'>\r\n                    <label htmlFor=\"eventTime\">Time</label>\r\n                    <input id=\"eventTime\" type=\"time\" name=\"eventTime\"\r\n                           placeholder=\"eventTime\" value={eventTime} onChange={onHandlerChande}/>\r\n                    {fieldsErrors['eventTime'] && isErrorShown &&\r\n                    <span className='error_span'>{fieldsErrors['eventTime']}</span>}\r\n                </div>\r\n                <div className='input_wrapper'>\r\n                    <label htmlFor=\"notes\">Notes</label>\r\n                    <input id=\"notes\" type=\"text\" name=\"notes\"\r\n                           placeholder=\"notes\" value={notes} onChange={onHandlerChande}/>\r\n                </div>\r\n                <div className='input_wrapper'>\r\n                    <label htmlFor=\"color\">Color</label>\r\n                    <select name=\"color\" id=\"color\" value={color} onChange={onHandlerChande}>\r\n                        <option value=\"blue\">Blue</option>\r\n                        <option value=\"red\">Red</option>\r\n                        <option value=\"green\">Green</option>\r\n                    </select>\r\n\r\n                </div>\r\n\r\n                <div className=\"editor_bottom\">\r\n                    {isEditorForNewEvent\r\n                        ? <button onClick={onCloseEditor} type='button' className='cancel_btn'>Cancel</button>\r\n                        : <button onClick={onDeleteEvent} type='button' className='cancel_btn'>Delete</button>\r\n                    }\r\n                    <button onClick={onSubmitForm} type='button' className='save_btn'>Save</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mSTP = state => ({\r\n    eventsList: state.events\r\n})\r\n\r\nconst mDTP = dispatch => ({\r\n    closeEditor: () => dispatch(closeEditor()),\r\n    addEvent: (eventToAdd) => dispatch(addEvent(eventToAdd)),\r\n    editEvent: (updatedList) => dispatch(editEvent(updatedList)),\r\n    deleteEvent: (id) => dispatch(deleteEvent(id)),\r\n})\r\n\r\nexport default connect(mSTP, mDTP)(Radium(EventEditor));","import React, {useState} from \"react\"\r\nimport {Calendar, momentLocalizer} from 'react-big-calendar';\r\nimport EventEditor from '../EventEditor/EventEditor';\r\nimport moment from 'moment';\r\nimport {connect} from 'react-redux';\r\nimport {showEditor, closeEditor} from \"../../redux/modal/modalActions\";\r\n\r\nconst localizer = momentLocalizer(moment)\r\n\r\nconst MyCalendar = props => {\r\n    const initialSelectedSlot = {\r\n        bounds: {},\r\n        slots: []\r\n    }\r\n\r\n    const [selectedSlot, setSelectedSlot] = useState(initialSelectedSlot);\r\n\r\n    const onCalendarClick = (e, sec) => {\r\n        if(props.isEditorOpened){\r\n            props.closeEditor();\r\n            return;\r\n        }\r\n\r\n\r\n\r\n        setSelectedSlot({\r\n            bounds: {\r\n                clientX: e.box ? e.box.clientX : e.bounds.left,\r\n                clientY: e.box ? e.box.clientY : e.bounds.top,\r\n            },\r\n            slots: e.slots,\r\n\r\n        })\r\n        props.openEditor();\r\n    }\r\n\r\n    const onEventClick = (e, eSec) => {\r\n        props.closeEditor();\r\n\r\n        setSelectedSlot({\r\n            bounds: {\r\n                clientX: eSec.pageX,\r\n                clientY: eSec.pageY,\r\n            },\r\n            slots: [false],\r\n            eventInfo: {\r\n                title: e.title,\r\n                start: e.start,\r\n                end: e.end,\r\n                notes: e.notes,\r\n                color: e.color,\r\n                id: e.id\r\n            }\r\n        })\r\n        props.openEditor();\r\n    }\r\n\r\n    const showTooltip = (e) => {\r\n        return e.notes\r\n    }\r\n\r\n    const onCloseEditor = () => {\r\n        props.closeEditor();\r\n    }\r\n\r\n    const addEventStyles = (event) => {\r\n        return {\r\n            style: {\r\n                backgroundColor: event.color,\r\n                color:'#fff',\r\n                padding: '8px 12px'\r\n            }\r\n        }\r\n    }\r\n\r\n    const addDayStyles = (date) => {\r\n\r\n        return {\r\n            className: 'day_item',\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='calendar'>\r\n            {props.isEditorOpened && <EventEditor eventsList={props.eventsList} selectedSlot={selectedSlot}/>}\r\n            <Calendar\r\n                localizer={localizer}\r\n                defaultDate={new Date()}\r\n                defaultView=\"month\"\r\n                events={props.eventsList}\r\n                style={{height: \"90vh\"}}\r\n                selectable={true}\r\n                onSelectSlot={onCalendarClick}\r\n                onSelectEvent={onEventClick}\r\n                onNavigate={onCloseEditor}\r\n                onView={onCloseEditor}\r\n                onRangeChange={onCloseEditor}\r\n                tooltipAccessor={showTooltip}\r\n                eventPropGetter={addEventStyles}\r\n                dayPropGetter={addDayStyles}\r\n            />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mSTP = state => ({\r\n    isEditorOpened: state.modals.isEditorShown,\r\n    eventsList: state.events\r\n});\r\n\r\nconst mDTP = dispatch => ({\r\n    openEditor: () => dispatch(showEditor()),\r\n    closeEditor: () => dispatch(closeEditor())\r\n});\r\n\r\nexport default connect(mSTP, mDTP)(MyCalendar);","import './App.css';\nimport { connect } from \"react-redux\";\nimport MyCalendar from './components/Calendar/Calendar';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <MyCalendar/>\n        </div>\n    );\n}\n\n// const mDTS = state => ({\n//     // isLoading: state.isLoading,\n//     // error: state.error,\n// });\n\n// const mDTP = state => {\n//     // getUserAction,\n//     // getTrainingAction,\n// };\n\nexport default connect(null)(App);\n","import {createReducer} from \"@reduxjs/toolkit\";\nimport {showEditor, closeEditor} from \"./modalActions\";\n\nexport default createReducer(false, {\n    [showEditor]: (state, action) => ({isEditorShown: true}),\n    [closeEditor]: (state, action) => ({isEditorShown: false}),\n    // [addContact]: (state, action) => [...state, action.payload],\n    // [deleteContact]: (state, action) =>\n    //     state.filter((item) => item.id !== action.payload),\n    // [addFromLocalStorage]: (state, action) => [...state, ...action.payload],\n});","import {createReducer} from \"@reduxjs/toolkit\";\r\nimport {addEvent, deleteEvent, editEvent} from \"./eventsActions\";\r\n\r\nexport default createReducer([], {\r\n    [addEvent]: (state, action) => [...state, action.payload],\r\n    [deleteEvent]: (state, action) =>\r\n        state.filter((item) => item.id !== action.payload),\r\n    [editEvent]: (state, action) => [...action.payload],\r\n});","import {configureStore} from '@reduxjs/toolkit';\r\n// import sessionReducer from './session/sessionReducer';\r\n// import trainingReducer from './training/trainingReducer';\r\n// import { loaderReducer } from './loader/loaderReducer';\r\n// import { booksReducer } from './books/booksReducer';\r\n// import { errorReducer } from './error/errorReducer';\r\nimport modalReducer from './modal/modalReducer';\r\nimport eventsReducer from './events/eventsReduser';\r\nimport thunk from 'redux-thunk';\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        modals: modalReducer,\r\n        events: eventsReducer\r\n    },\r\n    middleware: [thunk],\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {store} from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}